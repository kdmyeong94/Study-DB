
SELECT 	 DEPARTMENT_ID FROM 	EMPLOYEES e ;

SELECT  *FROM DEPARTMENTS d ;


-- inner join
SELECT	e.EMPLOYEE_ID a ,
		e.FIRST_NAME b ,
		e.DEPARTMENT_ID  c, 
		d.DEPARTMENT_ID d,
		d.DEPARTMENT_NAME e 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
--WHERE e.EMPLOYEE_ID = 178
--WHERE  d.DEPARTMENT_ID = 270
ORDER BY e.EMPLOYEE_ID ASC
	;

SELECT  * FROM EMPLOYEES e 
WHERE DEPARTMENT_ID  IS NULL;

SELECT * FROM  DEPARTMENTS d ;



-- ansi inner join
-- 사원의 first_name, last_name, email, DEPARTMENTS_id, DEPARTMENTS_name,
-- jod_id, job_title, city
-- 단, city = 'Seattle'
SELECT  FIRST_NAME 
	,	LAST_NAME 
	,	EMAIL 
	,	e.DEPARTMENT_ID 
	, 	d.DEPARTMENT_NAME 
	,	e.JOB_ID 
	,	j.JOB_TITLE 
	, 	l.CITY 
FROM  EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID  = d.DEPARTMENT_ID 
	    		  INNER JOIN JOBS j 
    ON e.JOB_ID = j.JOB_ID
		  	 	  INNER JOIN LOCATIONS l 
	ON  d.LOCATION_ID = l.LOCATION_ID 
WHERE l.CITY = 'Seattle'
;



-- left outer join
SELECT  e.EMPLOYEE_ID  
	,	e.FIRST_NAME 
	,	e.HIRE_DATE 
	,	jh.EMPLOYEE_ID 
	,	jh.START_DATE 
	,	jh.END_DATE 
	,	jh.JOB_ID 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN JOB_HISTORY jh ON e.EMPLOYEE_ID =jh.EMPLOYEE_ID 
ORDER BY e.EMPLOYEE_ID 
;


SELECT  e.EMPLOYEE_ID 
	,	e.DEPARTMENT_ID 
	,	d.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
	FULL OUTER JOIN DEPARTMENTS d  ON e.DEPARTMENT_ID  = d.DEPARTMENT_ID 
;





/*
 * 1. 사원의 이름, 부서번호, 부서명 출력
 */

SELECT   e.FIRST_NAME 
	,	 e.DEPARTMENT_ID
	,	d.DEPARTMENT_NAME 
FROM	 EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
;
/*
 * 2. 30번 부서의 사원들의 이름, 직업, 부서명을 출력
 */

SELECT  e.LAST_NAME 
	,	e.JOB_ID 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.DEPARTMENT_ID = 30
;
/*
 * 3. 커미션을 받는 사원의 이름, 직업, 부서번호, 부서명을 출력
 */
SELECT  e.LAST_NAME 
	,	e.JOB_ID 
	,	e.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.COMMISSION_PCT IS NOT NULL
;
/*
 * 4. 지역변호(location_id) 2500번에서 근무하는
 * 사원의 이름, 직업, 부서번호, 부서명을 출력
 */
SELECT  e.LAST_NAME 
	,	e.JOB_ID 
	,	e.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME name
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE d.LOCATION_ID = 2500
	;
/*
 * 5. 이름에 A가 들어가는 사원들의 이름과 부서이름을 출력
 */

SELECT 	e.FIRST_NAME 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
	LEFT OUTER JOIN DEPARTMENTS d  ON e.DEPARTMENT_ID =d.DEPARTMENT_ID 
WHERE e.FIRST_NAME LIKE '%A%'
;
/*
 * 6. 사원이름과 그 사원의 관리자 이름(manager)을 출력
 */
SELECT  e.FIRST_NAME || ' ' || e.LAST_NAME  사원명
	,	e.EMPLOYEE_ID 사번
	,	e2.FIRST_NAME || ' ' || e2.LAST_NAME 매니저명
	,	e2.EMPLOYEE_ID 매니저사번
FROM 	EMPLOYEES e INNER JOIN EMPLOYEES e2 
	ON e.MANAGER_ID = e2.EMPLOYEE_ID 
;
/*
 * 7. 사원이름과 부서명과 월급을 출력하는데,
 * 월급이 3000이상인 사원을 출력
 */
SELECT 	e.LAST_NAME 
	,	d.DEPARTMENT_NAME 
	,	e.SALARY 
FROM 	EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.SALARY >= 3000
ORDER BY e.SALARY 
;
/*
 * 8. 급여가 3000에서 5000사이인 사원의 이름과 소속부서명 출력
 */
SELECT  e.LAST_NAME 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.SALARY BETWEEN 3000 AND 5000
;
/*
 * 9. 급여가 3000 이하인 사원의 이름과 급여, 근무지 출력
 */
SELECT 	e.LAST_NAME 
	,	e.SALARY 
	,	l.LOCATION_ID 
	,	l.CITY 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
		INNER JOIN LOCATIONS l 
	ON d.LOCATION_ID = l.LOCATION_ID 
WHERE e.SALARY <= 3000
;
/*
 * 10. 'Steven King'의 부서명을 출력
 */
SELECT 	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.EMPLOYEE_ID  = 100
;
/*
 * 11. IT부서에서 근무하고 있는 사람을 출력
 */
SELECT 	LAST_NAME 
FROM 	EMPLOYEES e 
WHERE 	DEPARTMENT_ID = 60
;
/*
 * 12. employees테이블에서 사원번호, 이름 업무, 부서번호,
 * 부서명, 근무지 아이디
 */
SELECT  e.EMPLOYEE_ID 
	,	e.LAST_NAME 
	,	e.JOB_ID 
	,	e.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME 
	,	d.LOCATION_ID 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
;
/*
 * 13. 'SA_MAN' 직군의 사원번호, 이름, 급여, 부서명, 근무지 아이디 출력
 */
SELECT 	e.EMPLOYEE_ID 
	,	e.LAST_NAME 
	,	e.SALARY 
	,	d.DEPARTMENT_NAME 
	,	d.LOCATION_ID 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.JOB_ID ='SA_MAN'
;




-- subquery
-- 평균급여보다 작은사람
-- 6462
SELECT  round(avg(SALARY))
FROM 	EMPLOYEES e 
;

SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME 
FROM 	EMPLOYEES e 
WHERE   SALARY  < 6462
ORDER BY EMPLOYEE_ID 
;

-- subquery
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME 
FROM 	EMPLOYEES e 
WHERE   SALARY  < ( SELECT  round(avg(SALARY)) 
					FROM 	EMPLOYEES e )
ORDER BY EMPLOYEE_ID 
;


--WHERE 절에서는 집계함수를 사용 할 수 없다.
SELECT  EMPLOYEE_ID , FIRST_NAME , LAST_NAME 
FROM 	EMPLOYEES e 
WHERE   SALARY  < round(avg(SALARY))
ORDER BY EMPLOYEE_ID 
;



-- 문제 country_id = 'US' 인 location_id의
--		부서 테이블의 정보 전체를 조회

SELECT  LOCATION_ID 
FROM 	LOCATIONS l 
WHERE  	COUNTRY_ID = 'US'
;

SELECT  *
FROM 	DEPARTMENTS d 
WHERE 	LOCATION_ID IN (SELECT  LOCATION_ID 
FROM 	LOCATIONS l 
WHERE  	COUNTRY_ID = 'US')
;


-- 월급이 가장 적은 사원의 이름을 first_name, last_name을 연결해서 조회

SELECT  MIN(SALARY) 
FROM 	EMPLOYEES e 
;

SELECT  FIRST_NAME || ' ' || LAST_NAME 
FROM 	EMPLOYEES e 
WHERE 	SALARY = (SELECT  MIN(SALARY) 
				  FROM 	EMPLOYEES e 
)
;


-- 월급이 가장 많은 사원
SELECT 	e.FIRST_NAME  || ' ' || e.LAST_NAME  name
	,	e.SALARY 
	,	j.JOB_TITLE 
FROM 	EMPLOYEES e 
	LEFT OUTER JOIN JOBS j  ON e.JOB_ID = j.JOB_ID 
WHERE 	e.SALARY = (SELECT MAX(SALARY)FROM EMPLOYEES e2)
;






-- 1. last_name이 'Kochhar'인 사람의 급여보다
-- 많은 사원의 사원번호, 이름, 담당업무(job_id), 급여를 조회

SELECT 	EMPLOYEE_ID 	
	,	FIRST_NAME || ' ' || LAST_NAME 
	,	JOB_ID 
	,	SALARY 
FROM 	EMPLOYEES e 
WHERE   SALARY > (SELECT SALARY FROM EMPLOYEES e2 WHERE LAST_NAME = 'Kochhar')
;

/*
 * 2. 급여의 평균보다 적은 사원의 사원번호, 이름, 담당업무, 급여, 부서번호, 부서명 출력
 */

SELECT  e.EMPLOYEE_ID 
	,	e.FIRST_NAME || ' ' || e.LAST_NAME 
	,	e.JOB_ID 
	,	e.SALARY 
	,	e.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE   SALARY < (SELECT round(AVG(SALARY)) FROM EMPLOYEES e2 )
;

/*
 * 3. 100번 부서의 최소 급여보다, 최소 급여가 많은 다른 모든 부서를 출력
 */

SELECT  MIN(SALARY) 
	,	DEPARTMENT_ID 
FROM 	EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
;

SELECT  MIN(SALARY) 
	,	DEPARTMENT_ID 
FROM 	EMPLOYEES e 
WHERE   SALARY> (SELECT  MIN(SALARY) 
FROM 	EMPLOYEES e 
WHERE DEPARTMENT_ID = 100
GROUP BY DEPARTMENT_ID )
GROUP BY DEPARTMENT_ID 
;
/*
 * 4. 업무가 'SA_MAN'인 사원의 이름, 업무(job_id), 부서명, 근무지(city)를 출력 
 */

SELECT  e.FIRST_NAME ||' '|| e.LAST_NAME 
	,	e.JOB_ID 
	,	d.DEPARTMENT_NAME 
	,	l.CITY 
FROM 	EMPLOYEES e INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID =d.DEPARTMENT_ID 
					INNER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID 
WHERE  	JOB_ID = 'SA_MAN'					
;

SELECT  FIRST_NAME 
	,	JOB_ID 
	,	DEPARTMENT_ID 
FROM 	EMPLOYEES e 
WHERE 	JOB_ID  = 'SA_MAN'
;

SELECT  emp.FIRST_NAME
	,	emp.job_id
	,	d.DEPARTMENT_ID 
	,	d.DEPARTMENT_NAME 
	,	l.LOCATION_ID 
	,	l.CITY 
FROM 	(SELECT  FIRST_NAME 
	,	JOB_ID 
	,	DEPARTMENT_ID 
FROM 	EMPLOYEES e 
WHERE 	JOB_ID  = 'SA_MAN') emp
INNER JOIN DEPARTMENTS d  ON emp.department_id = d.DEPARTMENT_ID 
INNER JOIN LOCATIONS l    ON d.LOCATION_ID  = l.LOCATION_ID 

;

/*
 * 5. 가장많은 사원을 갖는 manager의 사원번호, 관리하는 사원수를 출력
 */

SELECT  MAX(COUNT(MANAGER_ID))
FROM 	EMPLOYEES e 
GROUP BY MANAGER_ID 
;


SELECT  MANAGER_ID , COUNT(*) 
FROM 	EMPLOYEES e 
GROUP BY MANAGER_ID 
HAVING  COUNT(MANAGER_ID) = (SELECT  MAX(COUNT(MANAGER_ID))
								FROM 	EMPLOYEES e 
								GROUP BY MANAGER_ID) 
;
/*
 * 6. 가장많은 사원이 속해있는 부서 번호와 사원수를 출력
 */

SELECT  MAX(COUNT(DEPARTMENT_ID))
FROM 	EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
;

SELECT  DEPARTMENT_ID 
	,	COUNT(DEPARTMENT_ID) 
FROM 	EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
HAVING  COUNT(DEPARTMENT_ID) = (SELECT  MAX(COUNT(DEPARTMENT_ID))
								FROM 	EMPLOYEES e 
								GROUP BY DEPARTMENT_ID )	
;
